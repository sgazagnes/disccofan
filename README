---------------------------------------------------------------
					README INFO PROGRAM
---------------------------------------------------------------

DIStributed Connected COmponent Filtering and ANalysis [DISCCOFAN]
Version "1.15" (18/01/2022)
Authors: Simon Gazagnes, including code from Michael Wilkinson, Jan Kazemier, Paul Teeninga
Contact: gazagnes@utexas.edu
Publications: 
@ARTICLE{gazagnes2021,
  author={Gazagnes, Simon and Wilkinson, Michael H. F},
  journal={IEEE Transactions on Image Processing}, 
  title={Distributed Connected Component Filtering and Analysis in 2D and 3D Tera-Scale Data Sets}, 
  year={2021},
  volume={30},
  number={},
  pages={3664-3675},
  doi={10.1109/TIP.2021.3064223}}
  
@article{gazagnes2019,
author = {Gazagnes, Simon and Wilkinson, Michael H. F.},
title = {Distributed Component Forests in 2-D: Hierarchical Image Representations Suitable for Tera-Scale Images},
journal = {International Journal of Pattern Recognition and Artificial Intelligence},
volume = {33},
number = {11},
pages = {1940012},
year = {2019},
doi = {10.1142/S0218001419400123}
}

License: See LICENSE file


Purpose: This program performs connected component analysis/filtering in 2D and 3D data sets using distributed-memory and shared-memory parallelization techniques. It is intended for extremely large data sets, but works very well on smaller data sets :).
         
---------------------------------------------------------------
						LIBRARIES
---------------------------------------------------------------
Libraries needed: OpenMPI, OpenMP, FreeImage, CFITSIO, HDF5
A container will come soon to avoid installing these dependencies.

---------------------------------------------------------------
						COMPILER
---------------------------------------------------------------

The compilation is done with 

make

You might want to adapt the Makefile if some libraries are installed locally.

---------------------------------------------------------------
						RUN THE PROGRAM
---------------------------------------------------------------
The basic line command to run the program is (if in the program directory):

mpirun -np [NUM_PROC] ./disccofan -g X,Y,Z --inprefix [imgprefix] --intype [imgtype] 

This will run a direct pruning based on the area of connected component using a max-tree representation of the data. In this case, the file name is expected to be [imgprefix].[imgtype]. 
The data will be divided internally and feed to [NUM_PROC] processes ([NUM_PROC] should be equal to X*Y*Z, these numbers can be odd or even, it doesn't matter).
The program allows also to use different attributes, file organization (classic image files + fits + hdf5), pruning rules, multi-scale operations... See the following part with the options descriptions

You can also run the interactive program which allows you to change the attribute threshold value and attribute function on the spot. It's pretty nice to test several of them in one go:
mpirun -np [NUM_PROC] ./disccofan_interactive -g X,Y,Z --inprefix [imgprefix] --intype [imgtype] 

---------------------------------------------------------------
						COMMAND LINE OPTIONS
---------------------------------------------------------------

--grid (-g) X,Y,Z :  (REQUIRED) Defines the grid division of the full volume. Example, for a MPI distribution such that the full volume is divided in 4 parts horizontally, 8 parts vertically and 2 parts in depth,
			then X = 4, Y = 8, Z = 2 (-g 4,8,2). Note that [NUM_PROC] should then be equal to X*Y*Z. The numbers can be even or odd.

--infile [0-4] : (OPTIONAL) How the input images are organized:
				      0: the input data is one single file that needs to be divided in this program (default). 
				      1: the input data is already divided and the images have names such as [imgprefix]-[X].[imgtype] where [X] is the file to be processed by the process [X]. 
				         Note that each file should include an overlap of 1 pixels from the neighbour tiles. See the notes at the end if this is not possible 
				      2: the input data is a single file that will be loaded by each process. For testing purposes
				      3: In case of combining RGB images (one file) into a luminance image. For testing purposes currently
				      4: In case of combining RGB images (individual files) into a luminance image. For testing purposes currently

--inprefix [imgprefix] : (OPTIONAL BUT SHOULD BE SPECIFIED) Prefix of the images to be read. Full names should be [imgprefix]-[X].[imgtype] if the volume is already divided in [NUM_PROC]*[X] files, 
						            or [imgprefix].[imgtype] if the data has to be divided internally. Default name prefix are "tile"
 
--intype [imgtype] : (OPTIONAL BUT SHOULD BE SPECIFIED) Type of the input image. Either classicial images format (png, jpg, pgm, tif ...), fits or h5. Default is "pgm"

--dataset [dataset name]: (REQUIRED IF USING HDF5 FILES). Name of the dataset in the h5 file

--refine (-r) [0 or 1] : (OPTIONAL) Refinement of the pixel intensities. Only if the initial data set is floating point or > to 16-bits, this option (if set to 1) will transform it into a 16-bit data set. Default is 0.
			            Note that the method handles > 16 bits or floating point, it is just in case such amount of quantization is not needed. 

--outfile [0 or 1] : (OPTIONAL) Output file organization. 
					  0: the output data will be written as one single file. 
				          1: Each process will write a file corresponding to the tile (+ the overlapping pixels from neighbour tiles) that it processed. 
						  Output file name will be [outputprefix]-[X].[outputtype] where [X] is id of the process that handled the tile  
					  Default: Same as the option --infile

--outtype [outputtype] : (OPTIONAL) Format for the output files, either classicial images format (png, jpg, pgm, tif ...), fits or h5.. By default, the output format is the same as the input format.

--outprefix [outputprefix]: (OPTIONAL) Prefix of the output files.
				       0: The image will be named [outputprefix].[outputtype] 
				       1: The output files created will have their name as [outputprefix]-[X].[outputtype] i
				       Default: [outprefix] is "out", "out-{L,S,C}" for differential profile or "pattern.txt" for the pattern spectrum.

--saveout (-s) [0 or 1] : (OPTIONAL) Choice to save the output images. By default, the program saves all output files (1). 

--threads [Number of threads] : (OPTIONAL) Number of threads to use in each process. Default is the environment OMP_NUM_THREADS. You want to fix this to 1 if your data set is > 20 bits-per-pixel as 
					   the shared-memory parallelization is not efficient for these data sets.

--bitsperpixel (-b) [bit-per-pixel] : (OPTIONAL) Manually specify the dynamic range of the image. To use only if you know a priori the dynamic range of the data set used and it is different than the classical 8, 16, 32, 64, or floating 							 point data sets. It can speed the method in such cases (e.g., if the memory allocation has to be done only for 28 bits rather than 32).  
					
--flood [0-3]  : (OPTIONAL, deprecated) Flooding algorithm:
			0: Salembier's method 
			1: Improved Wilkinson's method by Paul Teeninga 
			2: Original Wilkinson's method
			3: Teeninga & Wilkinson's method. New default algorithm, better than everything else, no need to change this now

--attribute (-a) [0-12] : (OPTIONAL) Choose the attribute used in the tree nodes
						0: Area (default)
						1: Area of min enclosing rectangle
						2: Square of diagonal of minimal enclosing rectangle
						3: Moment of inertia
						4: (Moment of Inertia) / (area)^2
						5: Mean X position
						6: Mean Y position
						7: Mean Z position
						8 - Full inertia: area (same as attribute 0)
						9 - Full inertia: elongation
						10 - Full inertia: flatness
						11 - Full inertia: sparseness
						12 - Full inertia: Ncompactness

--filter (-f) [operation]: (OPTIONAL) Choice of the method to apply:
						"filter": Basic tree pruning based on the attribute choice (default)
						"differential": Differential profile based on the attribute choice
						"pattern":  Pattern spectra based on the attribute choice
						"none": No filtering 

--decision (-d) [0-3] : (OPTIONAL) Choose the pruning rule (only in case of filtering with non-increasing attributes, not for differential profile or pattern spectra)
						0: Direct pruning (default): The direct rule consists of simply removing the nodes that have to be removed even if this does not create a pruning strategy. The pixels belonging to the nodes 							   that have been removed are merged to the node of their first ancestor that has to be preserved. 
						1: Min pruning. The min rule prunes the branches from the leaves up tothe last node that has to be removed. 
						2: Max pruning. The max rule prunes the branches from the leaves up to the first node that has to be preserved.
						3: Subtractive pruning. The subtractive rule is the same as the direct rule except that the gray levels of surviving descendants of removed nodes are also lowered, so that the contrast with 							   the local background remains the same.

--lambda (-l) [value] : (OPTIONAL BUT SHOULD BE SPECIFIED IF -f IS FILTER) Threshold value for pruning. Default value is 100

--lvec [file name]: (OPTIONAL) Lambda vector file name. By default is the file in the directory res, named lvec.txt

--tree (-t) [tree representation]: (OPTIONAL) Type of tree representation:
					      Min: Min-tree
					      Max: Max-tree (default)
			
--morphology (-m) [morphological operation]: (OPTIONAL) Type of morphological operation.
					     opening: Morphological opening based on attribute choice (default)
					     closing: Morphological closing based on attribute choice
					
--connectivity (-c) [connectivity]: (OPTIONAL) Type of connectivity:
						4:  4 connectivity for 2D dataset (default for 2D)
						6:  6 connectivity for 3D dataset (default for 3D)
						8:  8 connectivity for 2D dataset
					       26: 26 connectivity for 3D dataset	
										
--imscale [value] :(OPTIONAL) Scaling factor for thresholds in the vector file (lvec option). Default is 1.0

--background [0 or 1]: (OPTIONAL) Account for background intensity pixels in the pattern spectra, default is 0.

--verbosity (-v) [verbosity]: (OPTIONAL) Add verbose output
							"off": No verbose output, except for warnings and errors (default)
							"timing": Timings of main steps performed
							"info": Addtionnal information from proc 0
							"debug": Follow-up of every steps in each process
							"all": Equivalent to debug
							

---------------------------------------------------------------
				ADDITIONNAL DESCRIPTION 
---------------------------------------------------------------

- Any new attributes can be easily added by including them in the attributes .c and .h files. Feel free to contact me if you need some help, I'd be happy to help you.
- This new version of the method takes advantage of an overlapping border that includes a 1 pixel overlap from the pixels in the neighbour tiles. 
	This is handled internally when the file to process is a single file, but this needs to be included if the file is divided before by the user. There are some softwares that can be this cutting part with the overlap. I am working 
	on including this in the code.


---------------------------------------------------------------
				Checking the code
---------------------------------------------------------------

By running "make check" you can create a check program that you can run to make sure everything is working fine. After compilation, you can run ./check. If everything is green, you are good to go :).
There is also a function polyimage that can do many stuff, it is mainly intended for me, but feel free to check it. You can use it to create some random images, change the image type, dynamic range, compute some power spectrum...


If any problem occurs, feel free to contact me!

